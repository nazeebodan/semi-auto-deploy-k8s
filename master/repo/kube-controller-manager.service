[Unit]
Description=Kubernetes Controller Manager
Documentation=https://github.com/GoogleCloudPlatform/kubernetes
[Service]
EnvironmentFile=-/etc/kubernetes/config
ExecStart=/usr/bin/kube-controller-manager \\
--address=127.0.0.1 \\
--allocate-node-cidrs=true \\
--service-cluster-ip-range=10.254.0.0/16 \\
--cluster-cidr=10.254.0.0/16 \\
--cluster-name=kubernetes \\
--cluster-signing-cert-file=/etc/kubernetes/ssl/ca.pem \\
--cluster-signing-key-file=/etc/kubernetes/ssl/ca-key.pem \\
--service-account-private-key-file=/etc/kubernetes/ssl/ca-key.pem \\
--root-ca-file=/etc/kubernetes/ssl/ca.pem \\
--leader-elect=true \\
--etcd-servers=http://{MASTER_NAME}:2379 \\
--logtostderr=true \\
--v=0 \\
--allow-privileged=true
--master=http://${MASTER_NAME}:8080
Restart=on-failure
RestartSec=5
[Install]
WantedBy=multi-user.target

--address 值必须为 127.0.0.1 ，因为当前 kube-apiserver 期望scheduler 和 controller-manager 在同一台机器，否则kubectl get cs的状态会不正确
--master=http://{MASTER_IP}:8080 ：使用非安全 8080 端口与 kubeapiserve通信；
--cluster-cidr 指定 Cluster 中 Pod 的 CIDR 范围，该网段在各 Node间必须路由可达(flanneld保证)；
--service-cluster-ip-range 参数指定 Cluster 中 Service 的CIDR范围，该网络在各 Node 间必须路由不可达，必须和 kube-apiserver 中的参数一致；
--cluster-signing-* 指定的证书和私钥文件用来签名为 TLS BootStrap创建的证书和私钥；
--root-ca-file 用来对 kube-apiserver 证书进行校验，指定该参数后，才会在Pod 容器的 ServiceAccount 中放置该 CA 证书文件；
--leader-elect=true 部署多台机器组成的 master 集群时选举产生一处于工作状态的 kube-controller-manager 进程；